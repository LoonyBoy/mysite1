import React, { useEffect, useRef, useState, useCallback } from 'react'
import styled from 'styled-components'
import { gsap } from 'gsap'
import { useNavigate } from 'react-router-dom'
import { useParticles } from '../components/GlobalParticleManager'
import CustomCursor from '../components/CustomCursor'
import logger from '../utils/Logger'

const GameContainer = styled.div`
  width: 100vw;
  height: 100vh;
  height: 100dvh;
  background: transparent;
  position: relative;
  overflow: hidden;
  z-index: 1;
  touch-action: none;
  user-select: none;
`



const GameUI = styled.div`
  position: absolute;
  top: 2rem;
  left: 2rem;
  z-index: 3;
  color: white;
  font-size: 1.2rem;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.8);
  
  @media (max-width: 768px) {
    top: 1rem;
    left: 1rem;
    font-size: 1rem;
  }
`

const ExitHint = styled.div`
  position: absolute;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 3;
  color: rgba(255, 255, 255, 0.7);
  font-size: 0.9rem;
  text-align: center;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.8);
  
  @media (max-width: 768px) {
    bottom: 1rem;
    font-size: 0.8rem;
  }
`

const ExitButton = styled.button`
  position: absolute;
  top: 2rem;
  right: 2rem;
  z-index: 1000;
  width: 50px;
  height: 50px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  background: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(10px);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: none;
  transition: all 0.3s ease;
  color: rgba(255, 255, 255, 0.7);
  font-size: 1.5rem;
  user-select: none;
  pointer-events: auto;
  touch-action: manipulation;
  outline: none;
  
  &:hover {
    background: rgba(209, 72, 54, 0.2);
    border-color: var(--primary-red);
    color: var(--primary-red);
    transform: scale(1.1);
  }
  
  &:active {
    transform: scale(0.95);
  }
  
  @media (max-width: 768px) {
    top: 1rem;
    right: 1rem;
    width: 44px;
    height: 44px;
    font-size: 1.3rem;
  }
  
  @media (min-width: 769px) {
    display: none;
  }
`

const ScreenFlashOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 0, 0, ${props => props.opacity || 0});
  pointer-events: none;
  z-index: 999;
  transition: opacity 0.1s ease;
`

const LowHealthOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, transparent 40%, rgba(255, 68, 68, 0.1) 100%);
  pointer-events: none;
  z-index: 998;
  opacity: ${props => props.visible ? 1 : 0};
  transition: opacity 0.3s ease;
  animation: ${props => props.visible ? 'pulse' : 'none'} 2s ease-in-out infinite;
  
  @keyframes pulse {
    0%, 100% { 
      background: radial-gradient(circle, transparent 40%, rgba(255, 68, 68, 0.1) 100%);
    }
    50% { 
      background: radial-gradient(circle, transparent 40%, rgba(255, 68, 68, 0.2) 100%);
    }
  }
`

const GameOverOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 100;
  opacity: 0;
  animation: fadeIn 0.5s ease forwards;
  pointer-events: auto;
  
  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }
`

const GameOverTitle = styled.h2`
  font-size: clamp(3rem, 8vw, 6rem);
  font-weight: 400;
  color: var(--primary-red);
  text-align: center;
  margin-bottom: 1rem;
  text-shadow: 
    0 0 10px rgba(209, 72, 54, 0.5),
    0 0 20px rgba(209, 72, 54, 0.3),
    0 2px 4px rgba(0, 0, 0, 0.8);
`

const FinalScore = styled.p`
  font-size: clamp(1.2rem, 3vw, 2rem);
  color: rgba(255, 255, 255, 0.8);
  text-align: center;
  margin-bottom: 3rem;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.8);
`

const GameOverButtons = styled.div`
  display: flex;
  gap: 2rem;
  flex-direction: row;
  
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 1rem;
  }
`

const GameOverButton = styled.button`
  padding: 1rem 3rem;
  border: 2px solid var(--primary-red);
  background: rgba(0, 0, 0, 0.2);
  backdrop-filter: blur(10px);
  color: var(--primary-red);
  font-size: 1.2rem;
  font-weight: 400;
  letter-spacing: 0.1em;
  text-transform: uppercase;
  transition: all 0.3s ease;
  min-height: 44px;
  position: relative;
  overflow: hidden;
  cursor: none;
  z-index: 101;
  pointer-events: auto;
  border-radius: 0;
  outline: none;
  user-select: none;
  text-shadow: 
    0 0 10px rgba(209, 72, 54, 0.5),
    0 0 20px rgba(209, 72, 54, 0.3);
  box-shadow: 
    0 0 20px rgba(0, 0, 0, 0.5),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  
  /* –ö–∏–±–µ—Ä–ø–∞–Ω–∫ –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ */
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(0, 255, 255, 0.1),
      rgba(255, 0, 255, 0.1),
      transparent
    );
    animation: cyberpunk-scan 3s infinite;
    pointer-events: none;
  }
  
  &:hover {
    background: rgba(209, 72, 54, 0.1);
    border-color: rgba(209, 72, 54, 0.8);
    color: rgba(209, 72, 54, 0.9);
    box-shadow: 
      0 0 30px rgba(209, 72, 54, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
  }
  
  &:active {
    transform: translateY(0);
    box-shadow: 
      0 0 15px rgba(209, 72, 54, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }
  
  @keyframes cyberpunk-scan {
    0% { left: -100%; }
    100% { left: 100%; }
  }
  
  @media (max-width: 768px) {
    padding: 0.8rem 2rem;
    font-size: 1rem;
    min-width: 200px;
  }
`

const SpaceInvadersPage = () => {
  const navigate = useNavigate()
  const canvasRef = useRef(null)
  const gameLoopRef = useRef(null)
  const touchRef = useRef({ isPressed: false, x: 0 })
  const hasInitialized = useRef(false)
  const { camera, setTransitionContext, animateParticlesGameExit } = useParticles()
  
  // –ò–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [score, setScore] = useState(0)
  const [lives, setLives] = useState(3)
  const [gameState, setGameState] = useState('playing') // playing, gameOver
  const gameStateRef = useRef('playing') // Ref –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
  const [showCursorAnimation, setShowCursorAnimation] = useState(false)
  const [animationData, setAnimationData] = useState(null)
  const [playerVisible, setPlayerVisible] = useState(true)
  const [screenShake, setScreenShake] = useState({ active: false, intensity: 0 })
  const [screenFlash, setScreenFlash] = useState({ active: false, opacity: 0 })
  const [gameInitialized, setGameInitialized] = useState(false)
  const [shipAnimating, setShipAnimating] = useState(false)
  
  // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
  const gameObjects = useRef({
    player: {
      x: 0,
      y: 0,
      width: 16, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –∫—É—Ä—Å–æ—Ä–æ–º
      height: 24, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –∫—É—Ä—Å–æ—Ä–æ–º
      speed: 5
    },
    bullets: [],
    enemies: [],
    particles: [],
    shipTrail: [], // –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ —Ç—Ä–µ–π–ª–∞ –∫–æ—Ä–∞–±–ª—è
    explosionWaves: [] // –ú–∞—Å—Å–∏–≤ –≤–æ–ª–Ω –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –≤–∑—Ä—ã–≤–æ–≤
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (hasInitialized.current) {
      console.log('‚ö†Ô∏è SpaceInvadersPage: Already initialized, skipping')
      return
    }
    
    hasInitialized.current = true
    console.log('üéÆ SpaceInvadersPage: Component mounted, initializing...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    const animationDataStr = sessionStorage.getItem('cursorToShipAnimation')
    console.log('üîç SpaceInvadersPage: Checking for animation data in sessionStorage', {
      found: !!animationDataStr,
      data: animationDataStr
    })
    
    if (animationDataStr) {
      try {
        const data = JSON.parse(animationDataStr)
        console.log('üì¶ SpaceInvadersPage: Parsed animation data', data)
        
        if (data.active) {
          console.log('‚úÖ SpaceInvadersPage: Animation data is active, setting up ship animation')
          setAnimationData(data)
          setShipAnimating(true) // –∫–æ—Ä–∞–±–ª—å –±—É–¥–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è
          setPlayerVisible(true) // –∫–æ—Ä–∞–±–ª—å –≤–∏–¥–∏–º –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
          setGameInitialized(false) // –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–≥—Ä—ã
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
          gameObjects.current.player.x = data.startX
          gameObjects.current.player.y = data.startY
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–≤–∏–¥–∏–º—ã–π –∫–æ—Ä–∞–±–ª—å = –∫—É—Ä—Å–æ—Ä)
          // rotation: 0 - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–µ–≤–æ –∫–∞–∫ –∫—É—Ä—Å–æ—Ä-—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
          gameObjects.current.player.visualProps = { scale: 1, opacity: 1, rotation: 0 }
          
          console.log('üöÄ SpaceInvadersPage: Ship positioned at cursor location', {
            x: data.startX, 
            y: data.startY,
            visualProps: gameObjects.current.player.visualProps
          })
          console.log('‚è≥ SpaceInvadersPage: Game initialization delayed until animation completes')
          
          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          sessionStorage.removeItem('cursorToShipAnimation')
          console.log('üóëÔ∏è SpaceInvadersPage: Animation data cleared from sessionStorage')
        } else {
          console.log('‚ùå SpaceInvadersPage: Animation data not active')
          setGameInitialized(true)
        }
      } catch (error) {
        console.error('‚ùå SpaceInvadersPage: Error parsing cursor animation data:', error)
      }
    } else {
      console.log('‚ÑπÔ∏è SpaceInvadersPage: No animation data found, normal game start')
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      // rotation: 90 - –¥–ª—è –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã –∫–æ—Ä–∞–±–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–≤–µ—Ä—Ö
      gameObjects.current.player.visualProps = { scale: 1, opacity: 1, rotation: 90 }
      setGameInitialized(true)
    }

    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
    const resizeCanvas = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
      gameObjects.current.player.x = canvas.width / 2
      gameObjects.current.player.y = canvas.height - 80
    }
    
    resizeCanvas()
    window.addEventListener('resize', resizeCanvas)
    
    logger.navigation('Space Invaders game initialized', {
      canvasSize: { width: canvas.width, height: canvas.height },
      playerPosition: gameObjects.current.player
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    // (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∞–Ω–æ –∏–∑-–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞)
    if (gameInitialized && !shipAnimating) {
      console.log('üéÆ SpaceInvadersPage: Starting game loop immediately')
      startGameLoop(ctx)
      spawnEnemies()
    } else {
      console.log('‚è≥ SpaceInvadersPage: Game loop delayed, waiting for animation completion', {
        gameInitialized,
        shipAnimating
      })
    }

    return () => {
      console.log('üßπ SpaceInvadersPage: Cleanup - removing listeners and stopping game loop')
      window.removeEventListener('resize', resizeCanvas)
      if (gameLoopRef.current) {
        cancelAnimationFrame(gameLoopRef.current)
        gameLoopRef.current = null
      }
    }
  }, []) // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å camera, —á—Ç–æ–±—ã useEffect –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π —á–∞—Å—Ç–∏—Ü
  useEffect(() => {
    if (camera) {
      console.log('üì∑ SpaceInvadersPage: Setting up camera animation')
      gsap.to(camera.rotation, {
        x: 0.5,
        y: 0.3,
        duration: 2,
        ease: "power2.out"
      })
    }
  }, [camera])

      // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  useEffect(() => {
    if (gameInitialized && !shipAnimating && canvasRef.current) {
      const canvas = canvasRef.current
      const ctx = canvas.getContext('2d')
      
      console.log('üéÆ SpaceInvadersPage: Game initialization triggered, starting game loop')
      startGameLoop(ctx)
      spawnEnemies()
    }
  }, [gameInitialized, shipAnimating])

  // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ—Ä–∞–±–ª—è –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –¥–æ –∏–≥—Ä–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
  useEffect(() => {
    if (shipAnimating && canvasRef.current && animationData && gameObjects.current.player.visualProps) {
      const canvas = canvasRef.current
      const targetX = canvas.width / 2
      const targetY = canvas.height - 80
      
      console.log('üåÄ SpaceInvadersPage: Cursor-ship ready for spiral flight', {
        from: { x: animationData.startX, y: animationData.startY },
        to: { x: targetX, y: targetY },
        shipProps: gameObjects.current.player.visualProps
      })
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
      const visualProps = gameObjects.current.player.visualProps
      
             // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Ä–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∫ –∏–≥—Ä–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∫—É—Ä—Å–æ—Ä —É–∂–µ —Å—Ç–∞–ª –∫–æ—Ä–∞–±–ª–µ–º)
       console.log('üöÄ Cursor transformed to ship, starting spiral flight')
        
        const centerX = targetX
        const centerY = targetY
        const maxRadius = Math.sqrt((targetX - animationData.startX) ** 2 + (targetY - animationData.startY) ** 2)
        const startAngle = Math.atan2(animationData.startY - centerY, animationData.startX - centerX)
        const totalRotation = Math.PI * 3 // 1.5 –æ–±–æ—Ä–æ—Ç–∞
        
        const spiralData = { progress: 0 }
        
        gsap.to(spiralData, {
          progress: 1,
          duration: 2.5,
          ease: "power2.inOut",
          onUpdate: function() {
            const progress = spiralData.progress
            const speedCurve = Math.sin(progress * Math.PI)
            
            const currentRadius = maxRadius * (1 - progress)
            const angleProgress = progress + (speedCurve * 0.3)
            const currentAngle = startAngle + totalRotation * angleProgress
            
            const x = centerX + Math.cos(currentAngle) * currentRadius
            const y = centerY + Math.sin(currentAngle) * currentRadius
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const prevX = gameObjects.current.player.x
            const prevY = gameObjects.current.player.y
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ—Ä–∞–±–ª—è
            gameObjects.current.player.x = x
            gameObjects.current.player.y = y
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ—Ä–∞–±–ª—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–ª–∞–≤–Ω–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            if (progress > 0.01) { // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –≤ –Ω–∞—á–∞–ª–µ
              const deltaX = x - prevX
              const deltaY = y - prevY
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–æ–ª –¥–≤–∏–∂–µ–Ω–∏—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
              const movementAngle = Math.atan2(deltaY, deltaX) * 180 / Math.PI
              const baseRotation = movementAngle + 180
              // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫ 90¬∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ > 0.8
              const rotateStart = 0.8
              if (progress > rotateStart) {
                const t = (progress - rotateStart) / (1 - rotateStart)
                visualProps.rotation = baseRotation * (1 - t) + 90 * t
              } else {
                visualProps.rotation = baseRotation
              }
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
            const canvas = canvasRef.current
            if (canvas) {
              const ctx = canvas.getContext('2d')
              // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
              ctx.clearRect(0, 0, canvas.width, canvas.height)
              // –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–∞–±–ª—å
              drawPlayer(ctx)
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
            if (Math.abs(progress - 0.5) < 0.02) {
              console.log('üîÑ Ship spiral flight halfway complete, rotation:', Math.round(visualProps.rotation) + '¬∞')
            }
          },
          onComplete: () => {
            console.log('‚úÖ Ship spiral flight completed')
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            gameObjects.current.player.x = targetX
            gameObjects.current.player.y = targetY
            
            // –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Å–ø–∏—Ä–∞–ª–∏, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            setShipAnimating(false)
            setGameInitialized(true)
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
            const cursor = document.querySelector('.cursor')
            if (cursor) {
              cursor.style.opacity = '1'
              console.log('üîÑ SpaceInvadersPage: Original cursor restored')
            }
          }
        })
    }
  }, [shipAnimating, animationData])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–º
  useEffect(() => {
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
    if (gameState === 'gameOver') return
    const handleTouchStart = (e) => {
      if (gameState !== 'playing') return
      
      e.preventDefault()
      const touch = e.touches[0]
      touchRef.current.isPressed = true
      touchRef.current.x = touch.clientX
      
      logger.touch('Game touch start', { x: touch.clientX, y: touch.clientY })
    }

    const handleTouchMove = (e) => {
      e.preventDefault()
      if (!touchRef.current.isPressed) return
      
      const touch = e.touches[0]
      const deltaX = touch.clientX - touchRef.current.x
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–∞–π–ø –≤–ª–µ–≤–æ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
      if (Math.abs(deltaX) > 100 && deltaX < 0) {
        logger.navigation('Swipe left detected, exiting game')
        exitGame()
        return
      }
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–º —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
      if (gameState !== 'playing') return
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —ç–∫—Ä–∞–Ω–∞
      const canvas = canvasRef.current
      if (canvas) {
        const playerWidth = gameObjects.current.player.width
        const minX = playerWidth / 2
        const maxX = canvas.width - playerWidth / 2
        gameObjects.current.player.x = Math.max(minX, Math.min(maxX, touch.clientX))
      }
      touchRef.current.x = touch.clientX
      
      logger.touch('Game ship control', { 
        shipX: gameObjects.current.player.x,
        touchX: touch.clientX 
      })
    }

    const handleTouchEnd = (e) => {
      e.preventDefault()
      touchRef.current.isPressed = false
      
      logger.touch('Game touch end')
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    const handleMouseMove = (e) => {
      if (gameState !== 'playing') return
      
      const canvas = canvasRef.current
      if (canvas) {
        const playerWidth = gameObjects.current.player.width
        const minX = playerWidth / 2
        const maxX = canvas.width - playerWidth / 2
        gameObjects.current.player.x = Math.max(minX, Math.min(maxX, e.clientX))
      }
    }

    const handleMouseDown = (e) => {
      if (gameState !== 'playing') return
      
      touchRef.current.isPressed = true
      touchRef.current.x = e.clientX
    }

    const handleMouseUp = () => {
      touchRef.current.isPressed = false
    }

    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        logger.navigation('Escape key pressed, exiting game')
        exitGame()
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Å–∞–Ω–∏–π –∏ –º—ã—à–∏
    document.addEventListener('touchstart', handleTouchStart, { passive: false })
    document.addEventListener('touchmove', handleTouchMove, { passive: false })
    document.addEventListener('touchend', handleTouchEnd, { passive: false })
    
    document.addEventListener('mousemove', handleMouseMove, { passive: true })
    document.addEventListener('mousedown', handleMouseDown, { passive: true })
    document.addEventListener('mouseup', handleMouseUp, { passive: true })
    document.addEventListener('keydown', handleKeyDown, { passive: true })

    return () => {
      document.removeEventListener('touchstart', handleTouchStart)
      document.removeEventListener('touchmove', handleTouchMove)
      document.removeEventListener('touchend', handleTouchEnd)
      
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mousedown', handleMouseDown)
      document.removeEventListener('mouseup', handleMouseUp)
      document.removeEventListener('keydown', handleKeyDown)
    }
  }, [gameState])

  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  const startGameLoop = (ctx) => {
    logger.navigation('Starting game loop')
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–∏–∫–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (gameLoopRef.current) {
      cancelAnimationFrame(gameLoopRef.current)
    }
    
    const gameLoop = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ ref –∏–ª–∏ –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      const canvas = canvasRef.current
      if (!canvas) {
        logger.navigation('Game loop stopped: no canvas')
        gameLoopRef.current = null
        return
      }
      
      // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
      updateGame()
      drawGame(ctx)
      
      gameLoopRef.current = requestAnimationFrame(gameLoop)
    }
    
    gameLoop()
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∞ –∫–æ—Ä–∞–±–ª—è
  const updateShipTrail = () => {
    const { player, shipTrail } = gameObjects.current
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É —Ç—Ä–µ–π–ª–∞ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    shipTrail.push({
      x: player.x,
      y: player.y + 8, // –ù–µ–º–Ω–æ–≥–æ –ø–æ–∑–∞–¥–∏ –∫–æ—Ä–∞–±–ª—è
      opacity: 1.0,
      age: 0
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏ —Ç—Ä–µ–π–ª–∞
    for (let i = shipTrail.length - 1; i >= 0; i--) {
      const point = shipTrail[i]
      point.age++
      point.opacity = Math.max(0, 1.0 - point.age / 20) // –ò—Å—á–µ–∑–∞–µ—Ç –∑–∞ 20 –∫–∞–¥—Ä–æ–≤
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏
      if (point.opacity <= 0) {
        shipTrail.splice(i, 1)
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Ç—Ä–µ–π–ª–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (shipTrail.length > 20) {
      shipTrail.splice(0, shipTrail.length - 20)
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  const updateGame = () => {
    if (gameStateRef.current !== 'playing') {
      console.log('üö´ updateGame blocked, gameState:', gameStateRef.current)
      return
    }
    
    const { player, bullets, enemies, shipTrail } = gameObjects.current
    const canvas = canvasRef.current
    if (!canvas) return
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª –∫–æ—Ä–∞–±–ª—è
    updateShipTrail()
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–µ–ª—å–±–∞
    if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–∞ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
      bullets.push({
        x: player.x,
        y: player.y - 10,
        width: 3,
        height: 10,
        speed: 8
      })
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª–∏
    gameObjects.current.bullets = bullets.filter(bullet => {
      bullet.y -= bullet.speed
      return bullet.y > -10
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    enemies.forEach(enemy => {
      // –ë–∞–∑–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
      enemy.y += enemy.speed
      
      // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      switch (enemy.type) {
        case 'fast':
          // –ë—ã—Å—Ç—Ä—ã–µ –≤—Ä–∞–≥–∏ –ø—Ä–æ—Å—Ç–æ –¥–≤–∏–∂—É—Ç—Å—è –ø—Ä—è–º–æ –≤–Ω–∏–∑
          break
          
        case 'tank':
          // –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–∞–Ω–∫–∏ —Å–ª–µ–≥–∫–∞ –ø–æ–∫–∞—á–∏–≤–∞—é—Ç—Å—è
          enemy.x += Math.sin(enemy.y * 0.02) * 0.5
          break
          
        case 'zigzag':
          // –ó–∏–≥–∑–∞–≥ –¥–≤–∏–∂–µ–Ω–∏–µ
          enemy.zigzagTimer++
          if (enemy.zigzagTimer >= enemy.zigzagChangeInterval) {
            enemy.zigzagDirection *= -1 // –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            enemy.zigzagTimer = 0
            enemy.zigzagChangeInterval = 20 + Math.random() * 40 // –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
          }
          
          enemy.x += enemy.speedX * enemy.zigzagDirection
          
          // –û—Ç—Ä–∞–∂–∞–µ–º –æ—Ç –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∑–∏–≥–∑–∞–≥–∞
          if (enemy.x <= enemy.width/2 || enemy.x >= canvas.width - enemy.width/2) {
            enemy.zigzagDirection *= -1
          }
          break
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
      enemy.x = Math.max(enemy.width/2, Math.min(canvas.width - enemy.width/2, enemy.x))
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
    const remainingEnemies = []
    enemies.forEach(enemy => {
      if (enemy.y < canvas.height + 50) {
        remainingEnemies.push(enemy)
      } else {
        // –í—Ä–∞–≥ —É—à–µ–ª –∑–∞ –∫—Ä–∞–π - –æ—Ç–Ω–∏–º–∞–µ–º –∂–∏–∑–Ω—å
        logger.particles('Enemy escaped! Losing life')
        setLives(prev => {
          const newLives = prev - 1
          logger.particles('Life lost! Lives remaining:', newLives)
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç—Ä—è—Å–∫–∏ –∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
          if (newLives > 0) {
            triggerScreenEffects()
          }
          
          if (newLives <= 0) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (gameLoopRef.current) {
              cancelAnimationFrame(gameLoopRef.current)
              gameLoopRef.current = null
            }
            setGameState('gameOver')
            gameStateRef.current = 'gameOver'
            logger.navigation('Game Over! Final score:', score)
          }
          
          return newLives
        })
      }
    })
    gameObjects.current.enemies = remainingEnemies
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
    gameObjects.current.particles = gameObjects.current.particles.filter(particle => {
      particle.x += particle.vx
      particle.y += particle.vy
      particle.life--
      particle.alpha = particle.life / 60 // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
      
      return particle.life > 0
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–Ω—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    gameObjects.current.explosionWaves = gameObjects.current.explosionWaves.filter(wave => {
      wave.age++
      const progress = wave.age / wave.maxAge
      
      // –†–∞–¥–∏—É—Å —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è —Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º
      wave.radius = wave.maxRadius * (1 - Math.pow(1 - progress, 2))
      
      // –°–∏–ª–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
      wave.currentStrength = wave.strength * (1 - progress)
      
      return wave.age < wave.maxAge
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
    checkCollisions()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤—Ä–∞–≥–æ–≤ —Å –∏–≥—Ä–æ–∫–æ–º
    checkPlayerCollisions()
    
    // –°–ø–∞–≤–Ω–∏–º –Ω–æ–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
    if (Math.random() < 0.02) { // 2% —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
      spawnEnemies()
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤ ~ 1 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
    if (Math.random() < 0.017) { // ~1% —à–∞–Ω—Å
      console.log('üéÆ Game update:', {
        gameState: gameStateRef.current,
        enemyCount: enemies.length,
        bulletCount: bullets.length,
        particleCount: gameObjects.current.particles.length
      })
    }
  }

  // –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const drawPlayer = (ctx) => {
    const { player } = gameObjects.current
    
    // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∏–¥–∏–º (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞)
    if (playerVisible) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
      ctx.save()
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const visualProps = player.visualProps
      if (visualProps) {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
          console.log('üé® Drawing player with visual props:', {
            scale: visualProps.scale,
            opacity: visualProps.opacity,
            rotation: visualProps.rotation || 0,
            position: { x: player.x, y: player.y }
          })
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        ctx.globalAlpha = visualProps.opacity || 1
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ—Ä–∞–±–ª—è
        ctx.translate(player.x, player.y)
        ctx.scale(visualProps.scale || 1, visualProps.scale || 1)
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–µ–≤–æ –∫–∞–∫ –∫—É—Ä—Å–æ—Ä)
        ctx.rotate((visualProps.rotation || 0) * Math.PI / 180)
        
        ctx.translate(-player.x, -player.y)
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–∏—Ö –∂–∏–∑–Ω—è—Ö
      if (lives <= 1) {
        ctx.shadowColor = '#FF4444'
        ctx.shadowBlur = 15
        ctx.shadowOffsetX = 0
        ctx.shadowOffsetY = 0
      }
      
      ctx.fillStyle = '#D14836' // –§–∏—Ä–º–µ–Ω–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
      ctx.beginPath()
      
      // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–ª–µ–≤–æ (–∫–∞–∫ –∫—É—Ä—Å–æ—Ä) - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
      // –ö—É—Ä—Å–æ—Ä: border-right: 16px, border-top/bottom: 12px
      const width = 16
      const height = 24 // 12px + 12px
      
      // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–µ–≤–æ (–≤–µ—Ä—à–∏–Ω–∞ —Å–ª–µ–≤–∞)
      ctx.moveTo(player.x - width/2, player.y) // –õ–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞
      ctx.lineTo(player.x + width/2, player.y - height/2) // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö
      ctx.lineTo(player.x + width/2, player.y + height/2) // –ü—Ä–∞–≤—ã–π –Ω–∏–∑
      ctx.closePath()
      ctx.fill()
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–Ω—å
      ctx.shadowColor = 'transparent'
      ctx.shadowBlur = 0
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      ctx.restore()
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å
      if (Math.random() < 0.01) { // 1% —à–∞–Ω—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('üëª SpaceInvadersPage: Player ship hidden (waiting for animation)')
      }
    }
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–µ–π–ª–∞ –∫–æ—Ä–∞–±–ª—è
  const drawShipTrail = (ctx) => {
    const { shipTrail } = gameObjects.current
    
    if (shipTrail.length < 2) return // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –ª–∏–Ω–∏–∏
    
    ctx.save()
    
    // –†–∏—Å—É–µ–º —Ç—Ä–µ–π–ª –∫–∞–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é –ª–∏–Ω–∏—é
    for (let i = 1; i < shipTrail.length; i++) {
      const currentPoint = shipTrail[i]
      const prevPoint = shipTrail[i - 1]
      
      // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏ –∫ —Ç–µ–∫—É—â–µ–π
      const gradient = ctx.createLinearGradient(
        prevPoint.x, prevPoint.y,
        currentPoint.x, currentPoint.y
      )
      
      // –§–∏—Ä–º–µ–Ω–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
      gradient.addColorStop(0, `rgba(209, 72, 54, ${prevPoint.opacity * 0.8})`)
      gradient.addColorStop(1, `rgba(209, 72, 54, ${currentPoint.opacity * 0.8})`)
      
      // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é
      ctx.strokeStyle = gradient
      ctx.lineWidth = 3 + (currentPoint.opacity * 2) // –¢–æ–ª—â–∏–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
      ctx.lineCap = 'round'
      ctx.beginPath()
      ctx.moveTo(prevPoint.x, prevPoint.y)
      ctx.lineTo(currentPoint.x, currentPoint.y)
      ctx.stroke()
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç—è—â–∏–µ—Å—è —Ç–æ—á–∫–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
      ctx.fillStyle = `rgba(255, 255, 255, ${currentPoint.opacity * 0.6})`
      ctx.beginPath()
      ctx.arc(currentPoint.x, currentPoint.y, 1 + currentPoint.opacity, 0, Math.PI * 2)
      ctx.fill()
    }
    
    ctx.restore()
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–æ–ª–Ω –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  const drawExplosionWaves = (ctx) => {
    const { explosionWaves } = gameObjects.current
    
    explosionWaves.forEach(wave => {
      ctx.save()
      
      // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
      let waveColor
      switch (wave.type) {
        case 'fast':
          waveColor = 'rgba(255, 68, 68, ' // –ö—Ä–∞—Å–Ω—ã–π
          break
        case 'tank':
          waveColor = 'rgba(65, 105, 225, ' // –°–∏–Ω–∏–π
          break
        case 'zigzag':
          waveColor = 'rgba(50, 205, 50, ' // –ó–µ–ª–µ–Ω—ã–π
          break
        default:
          waveColor = 'rgba(255, 255, 255, '
      }
      
      // –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫—Ä—É–≥–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–æ–ª–Ω—ã
      const ringCount = 3
      for (let i = 0; i < ringCount; i++) {
        const ringProgress = (i + 1) / ringCount
        const ringRadius = wave.radius * ringProgress
        const ringOpacity = (wave.currentStrength / wave.strength) * (1 - ringProgress * 0.7)
        
        if (ringOpacity > 0.01) {
          // –í–Ω–µ—à–Ω—è—è —Å–≤–µ—Ç—è—â–∞—è—Å—è –æ–±–≤–æ–¥–∫–∞
          ctx.strokeStyle = waveColor + (ringOpacity * 0.8) + ')'
          ctx.lineWidth = 3 + (wave.currentStrength * 0.3)
          ctx.beginPath()
          ctx.arc(wave.x, wave.y, ringRadius, 0, Math.PI * 2)
          ctx.stroke()
          
          // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±–æ–ª–µ–µ —Å–ª–∞–±–∞—è –æ–±–≤–æ–¥–∫–∞
          ctx.strokeStyle = waveColor + (ringOpacity * 0.4) + ')'
          ctx.lineWidth = 1 + (wave.currentStrength * 0.1)
          ctx.beginPath()
          ctx.arc(wave.x, wave.y, ringRadius - 2, 0, Math.PI * 2)
          ctx.stroke()
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –≤—Å–ø—ã—à–∫—É –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ –≤–æ–ª–Ω—ã
      if (wave.age < wave.maxAge * 0.3) {
        const flashOpacity = (1 - wave.age / (wave.maxAge * 0.3)) * 0.6
        ctx.fillStyle = waveColor + flashOpacity + ')'
        ctx.beginPath()
        ctx.arc(wave.x, wave.y, wave.currentStrength * 2, 0, Math.PI * 2)
        ctx.fill()
      }
      
      ctx.restore()
    })
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
  const drawGame = (ctx) => {
    const { bullets, enemies, particles, shipTrail, explosionWaves } = gameObjects.current
    
    // –†–∏—Å—É–µ–º —Ç—Ä–µ–π–ª –∫–æ—Ä–∞–±–ª—è (–¥–æ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –±—ã–ª –ø–æ–∑–∞–¥–∏)
    drawShipTrail(ctx)
    
    // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞
    drawPlayer(ctx)
    
    // –†–∏—Å—É–µ–º –ø—É–ª–∏
    ctx.fillStyle = '#FFD700' // –ó–æ–ª–æ—Ç—ã–µ –ø—É–ª–∏
    bullets.forEach(bullet => {
      ctx.fillRect(bullet.x - bullet.width/2, bullet.y, bullet.width, bullet.height)
    })
    
    // –†–∏—Å—É–µ–º –≤—Ä–∞–≥–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏
    enemies.forEach(enemy => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –≤—Ä–∞–≥–∞ –∏–∑ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      ctx.fillStyle = enemy.color
      
      // –†–∏—Å—É–µ–º –≤—Ä–∞–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      switch (enemy.type) {
        case 'fast':
          // –ë—ã—Å—Ç—Ä—ã–µ –≤—Ä–∞–≥–∏ - –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
          ctx.save()
          ctx.translate(enemy.x, enemy.y)
          ctx.beginPath()
          ctx.moveTo(0, -enemy.height/2)
          ctx.lineTo(-enemy.width/2, enemy.height/2)
          ctx.lineTo(enemy.width/2, enemy.height/2)
          ctx.closePath()
          ctx.fill()
          ctx.restore()
          break
          
        case 'tank':
          // –¢–∞–Ω–∫–∏ - –±–æ–ª—å—à–∏–µ –∫–≤–∞–¥—Ä–∞—Ç—ã —Å —Ä–∞–º–∫–æ–π
          ctx.fillRect(enemy.x - enemy.width/2, enemy.y - enemy.height/2, enemy.width, enemy.height)
          ctx.strokeStyle = '#FFFFFF'
          ctx.lineWidth = 2
          ctx.strokeRect(enemy.x - enemy.width/2, enemy.y - enemy.height/2, enemy.width, enemy.height)
          break
          
        case 'zigzag':
          // –ó–∏–≥–∑–∞–≥ –≤—Ä–∞–≥–∏ - —Ä–æ–º–±—ã
          ctx.save()
          ctx.translate(enemy.x, enemy.y)
          ctx.rotate(Math.PI / 4) // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 45 –≥—Ä–∞–¥—É—Å–æ–≤
          ctx.fillRect(-enemy.width/2, -enemy.height/2, enemy.width, enemy.height)
          ctx.restore()
          break
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è –≤—Ä–∞–≥–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ HP
      if (enemy.health > 1 && enemy.health < enemy.maxHealth) {
        ctx.fillStyle = '#FFFFFF'
        ctx.font = '10px Arial'
        ctx.textAlign = 'center'
        ctx.fillText(enemy.health.toString(), enemy.x, enemy.y - enemy.height/2 - 5)
      }
    })
    
    // –†–∏—Å—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
    particles.forEach(particle => {
      ctx.save()
      ctx.globalAlpha = particle.alpha
      ctx.fillStyle = particle.color
      ctx.beginPath()
      ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2)
      ctx.fill()
      ctx.restore()
    })
    
    // –†–∏—Å—É–µ–º –≤–æ–ª–Ω—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    drawExplosionWaves(ctx)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
  const spawnEnemies = () => {
    const canvas = canvasRef.current
    if (!canvas) {
      console.log('üö´ spawnEnemies: No canvas found')
      return
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤—Ä–∞–≥–∞: 60% Tank, 20% Fast, 20% Zigzag
    const rand = Math.random()
    let enemyType
    if (rand < 0.6) {
      enemyType = 'tank'
    } else if (rand < 0.8) {
      enemyType = 'fast'
    } else {
      enemyType = 'zigzag'
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
    const enemyConfigs = {
      fast: {
        width: 20,        // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 15 –¥–æ 20
        height: 20,       // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 15 –¥–æ 20
        speed: 3,         // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 4 –¥–æ 3
        speedX: 0,
        health: 1,
        color: '#FF4444', // –ö—Ä–∞—Å–Ω—ã–π
        points: 15
      },
      tank: {
        width: 35,
        height: 35,
        speed: 1,
        speedX: 0,
        health: 5,
        color: '#4169E1', // –°–∏–Ω–∏–π
        points: 50
      },
      zigzag: {
        width: 20,
        height: 20,
        speed: 2,
        speedX: 3, // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∏–≥–∑–∞–≥–∞
        health: 2,
        color: '#32CD32', // –ó–µ–ª–µ–Ω—ã–π
        points: 25
      }
    }
    
    const config = enemyConfigs[enemyType]
    
    const enemy = {
      x: Math.random() * (canvas.width - config.width) + config.width / 2,
      y: -config.height,
      width: config.width,
      height: config.height,
      speed: config.speed,
      speedX: config.speedX,
      type: enemyType,
      health: config.health,
      maxHealth: config.health,
      color: config.color,
      points: config.points,
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∑–∏–≥–∑–∞–≥–∞
      zigzagDirection: Math.random() > 0.5 ? 1 : -1,
      zigzagTimer: 0,
      zigzagChangeInterval: 30 + Math.random() * 30 // 30-60 –∫–∞–¥—Ä–æ–≤ –¥–æ —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    }
    
    gameObjects.current.enemies.push(enemy)
    
    console.log('‚úÖ New enemy spawned:', { 
      type: enemyType, 
      position: { x: enemy.x, y: enemy.y },
      health: enemy.health,
      totalEnemies: gameObjects.current.enemies.length,
      gameState: gameStateRef.current
    })
    
    logger.particles('Enemy spawned', { type: enemyType, position: { x: enemy.x, y: enemy.y } })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –ø—É–ª—å —Å –≤—Ä–∞–≥–∞–º–∏
  const checkCollisions = () => {
    const { bullets, enemies } = gameObjects.current
    
    bullets.forEach((bullet, bulletIndex) => {
      enemies.forEach((enemy, enemyIndex) => {
        if (
          bullet.x < enemy.x + enemy.width/2 &&
          bullet.x + bullet.width > enemy.x - enemy.width/2 &&
          bullet.y < enemy.y + enemy.height/2 &&
          bullet.y + bullet.height > enemy.y - enemy.height/2
        ) {
          // –ü–æ–ø–∞–¥–∞–Ω–∏–µ!
          enemy.health -= 1
          bullets.splice(bulletIndex, 1)
          
          if (enemy.health <= 0) {
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞ –∏ –≤–æ–ª–Ω—É –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
            createExplosionParticles(enemy.x, enemy.y, enemy.type)
            createExplosionWave(enemy.x, enemy.y, enemy.type)
            
            enemies.splice(enemyIndex, 1)
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Ä–∞–≥–∞
            setScore(prev => prev + enemy.points)
            
            logger.particles('Enemy destroyed', { 
              type: enemy.type, 
              scoreGained: enemy.points
            })
          }
        }
      })
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –≤—Ä–∞–≥–æ–≤ —Å –∏–≥—Ä–æ–∫–æ–º
  const checkPlayerCollisions = () => {
    const { player, enemies } = gameObjects.current
    
    enemies.forEach((enemy, enemyIndex) => {
      if (
        player.x < enemy.x + enemy.width/2 &&
        player.x + player.width/2 > enemy.x - enemy.width/2 &&
        player.y < enemy.y + enemy.height/2 &&
        player.y + player.height/2 > enemy.y - enemy.height/2
      ) {
        // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º!
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞ –≤—Ä–∞–≥–∞ –∏ –≤–æ–ª–Ω—É –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
        createExplosionParticles(enemy.x, enemy.y, enemy.type)
        createExplosionWave(enemy.x, enemy.y, enemy.type)
        
        enemies.splice(enemyIndex, 1) // –£–±–∏—Ä–∞–µ–º –≤—Ä–∞–≥–∞
        setLives(prev => {
          const newLives = prev - 1
          logger.particles('Player hit! Lives remaining:', newLives)
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç—Ä—è—Å–∫–∏ –∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
          if (newLives > 0) {
            triggerScreenEffects()
          }
          
          if (newLives <= 0) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (gameLoopRef.current) {
              cancelAnimationFrame(gameLoopRef.current)
              gameLoopRef.current = null
            }
            setGameState('gameOver')
            gameStateRef.current = 'gameOver'
            logger.navigation('Game Over! Final score:', score)
          }
          
          return newLives
        })
      }
    })
  }

  // –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
  const restartGame = () => {
    logger.navigation('Restarting game')
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    setGameState('playing')
    gameStateRef.current = 'playing' // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ref
    setScore(0)
    setLives(3)
    
    console.log('üîÑ Restarting game, gameState set to:', gameStateRef.current)
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —ç–∫—Ä–∞–Ω–∞
    setScreenShake({ active: false, intensity: 0 })
    setScreenFlash({ active: false, opacity: 0 })
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    if (gameLoopRef.current) {
      cancelAnimationFrame(gameLoopRef.current)
      gameLoopRef.current = null
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    gameObjects.current.bullets = []
    gameObjects.current.enemies = []
    gameObjects.current.particles = []
    gameObjects.current.shipTrail = [] // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–π–ª –∫–æ—Ä–∞–±–ª—è
    gameObjects.current.explosionWaves = [] // –û—á–∏—â–∞–µ–º –≤–æ–ª–Ω—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    // –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    const canvas = canvasRef.current
    if (canvas) {
      gameObjects.current.player.x = canvas.width / 2
      gameObjects.current.player.y = canvas.height - 80
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      gameObjects.current.player.visualProps = { scale: 1, opacity: 1, rotation: 90 }
      
      // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
      const ctx = canvas.getContext('2d')
      if (ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height)
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setTimeout(() => {
      const canvas = canvasRef.current
      if (canvas) {
        const ctx = canvas.getContext('2d')
        if (ctx) {
          // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ —Å—Ä–∞–∑—É
          spawnEnemies()
          spawnEnemies() // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–∞–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
          startGameLoop(ctx)
          
          logger.navigation('Game restarted successfully')
        }
      }
    }, 150) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
  const exitGame = () => {
    logger.navigation('Exiting Space Invaders game', { finalScore: score })
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    if (gameLoopRef.current) {
      cancelAnimationFrame(gameLoopRef.current)
      gameLoopRef.current = null
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
    setTransitionContext('game->home')
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–∞—Å—Ç–∏—Ü
    console.log('üî• Manually triggering particle game exit animation')
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
    if (animateParticlesGameExit) {
      console.log('üì¶ Using particle context to trigger exit animation')
      animateParticlesGameExit()
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–º–µ—Ä—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (camera) {
      console.log('üì∑ Resetting camera properties')
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
      gsap.to(camera.rotation, {
        x: 0,
        y: 0,
        z: 0,
        duration: 1.2,
        ease: "power2.out"
      })
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
      gsap.to(camera.position, {
        z: 1,
        duration: 1.2,
        ease: "power2.out"
      })
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º FOV –∫–∞–º–µ—Ä—ã
      gsap.to(camera, {
        fov: 75,
        duration: 1.2,
        ease: "power2.out",
        onUpdate: () => {
          camera.updateProjectionMatrix()
        }
      })
    }
    
    console.log('üéÆ‚û°Ô∏èüè† Exiting game, transition context set to:', 'game->home')
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
    const container = document.querySelector('.game-container')
    if (container) {
      gsap.to(container, {
        opacity: 0,
        duration: 0.6,
        ease: "power2.out",
        onComplete: () => {
          navigate('/home')
        }
      })
    } else {
      navigate('/home')
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –≤–∑—Ä—ã–≤–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
  const createExplosionParticles = (x, y, enemyType) => {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
    const particleConfigs = {
      fast: { count: 6, color: '#FF4444', size: 1.5 },    // –ú–∞–ª–æ –∫—Ä–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü
      tank: { count: 15, color: '#4169E1', size: 3 },     // –ú–Ω–æ–≥–æ –±–æ–ª—å—à–∏—Ö —Å–∏–Ω–∏—Ö —á–∞—Å—Ç–∏—Ü
      zigzag: { count: 10, color: '#32CD32', size: 2 }    // –°—Ä–µ–¥–Ω–µ –∑–µ–ª–µ–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü
    }
    
    const config = particleConfigs[enemyType] || particleConfigs.fast
    
    for (let i = 0; i < config.count; i++) {
      const angle = (Math.PI * 2 / config.count) * i + Math.random() * 0.5
      const speed = 2 + Math.random() * 3
      
      gameObjects.current.particles.push({
        x: x,
        y: y,
        vx: Math.cos(angle) * speed,
        vy: Math.sin(angle) * speed,
        size: config.size + Math.random() * 2,
        color: config.color,
        alpha: 1,
        life: 60 + Math.random() * 30 // –∂–∏–∑–Ω—å —á–∞—Å—Ç–∏—Ü—ã –≤ –∫–∞–¥—Ä–∞—Ö
      })
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ª–Ω—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø—Ä–∏ –≤–∑—Ä—ã–≤–µ
  const createExplosionWave = (x, y, enemyType) => {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–ª–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
    const waveConfigs = {
      fast: { maxRadius: 80, strength: 5, duration: 30 },     // –ú–∞–ª–µ–Ω—å–∫–∞—è –±—ã—Å—Ç—Ä–∞—è –≤–æ–ª–Ω–∞
      tank: { maxRadius: 150, strength: 12, duration: 60 },   // –ë–æ–ª—å—à–∞—è –º–æ—â–Ω–∞—è –≤–æ–ª–Ω–∞
      zigzag: { maxRadius: 100, strength: 8, duration: 45 }   // –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–Ω–∞
    }
    
    const config = waveConfigs[enemyType] || waveConfigs.fast
    
    gameObjects.current.explosionWaves.push({
      x: x,
      y: y,
      radius: 0,
      maxRadius: config.maxRadius,
      strength: config.strength,
      age: 0,
      maxAge: config.duration,
      type: enemyType
    })
  }

  // –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ —ç–∫—Ä–∞–Ω–∞ –∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è
  const triggerScreenEffects = () => {
    // –¢—Ä—è—Å–∫–∞ —ç–∫—Ä–∞–Ω–∞
    setScreenShake({ active: true, intensity: 10 })
    
    // –ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
    setScreenFlash({ active: true, opacity: 0.3 })
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      setScreenShake({ active: false, intensity: 0 })
      setScreenFlash({ active: false, opacity: 0 })
    }, 1000)
  }

  return (
    <GameContainer 
      className="game-container"
      style={{
        transform: screenShake.active 
          ? `translate(${(Math.random() - 0.5) * screenShake.intensity}px, ${(Math.random() - 0.5) * screenShake.intensity}px)`
          : 'none'
      }}
    >
      <CustomCursor />
      
      {screenFlash.active && (
        <ScreenFlashOverlay opacity={screenFlash.opacity} />
      )}
      
      {/* –ö—Ä–∞—Å–Ω—ã–π overlay –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–∏—Ö –∂–∏–∑–Ω—è—Ö */}
      <LowHealthOverlay visible={lives <= 1 && gameState === 'playing'} />
      
      <canvas
        data-testid="game-canvas"
        ref={canvasRef}
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          display: 'block',
          touchAction: 'none',
          zIndex: 2
        }}
      />
      
      <GameUI>
        <div>–°—á–µ—Ç: {score}</div>
        <div style={{ 
          color: lives <= 1 ? '#FF4444' : 'white',
          textShadow: lives <= 1 ? '0 0 10px #FF4444, 0 0 20px #FF4444' : '0 2px 10px rgba(0, 0, 0, 0.8)',
          fontWeight: lives <= 1 ? 'bold' : 'normal'
        }}>
          –ñ–∏–∑–Ω–∏: {lives}
        </div>
        <div style={{ fontSize: '0.8em', marginTop: '0.5rem', opacity: 0.7 }}>
          –ó–∞–∂–º–∏ –∏ –¥–≤–∏–≥–∞–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        </div>
      </GameUI>
      
            {gameState === 'playing' && (
        <ExitHint>
          –°—Ç—Ä–µ–ª–æ—á–∫–∞ —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ Escape –¥–ª—è –≤—ã—Ö–æ–¥–∞
        </ExitHint>
      )}
      
      {gameState === 'playing' && (
        <ExitButton 
          onClick={(e) => {
            e.preventDefault()
            e.stopPropagation()
            console.log('Exit button clicked!')
            logger.navigation('Exit button clicked')
            exitGame()
          }}
          onMouseDown={(e) => {
            e.preventDefault()
            e.stopPropagation()
            console.log('Exit button mouse down')
          }}
          onTouchStart={(e) => {
            e.stopPropagation()
            console.log('Exit button touch start')
          }}
          onTouchEnd={(e) => {
            e.stopPropagation()
            console.log('Exit button touch end')
            exitGame()
          }}
        >
          ‚Üí
        </ExitButton>
      )}
      
      {gameState === 'gameOver' && (
        <GameOverOverlay>
          <GameOverTitle>GAME OVER</GameOverTitle>
          <FinalScore>–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {score}</FinalScore>
          <GameOverButtons>
            <GameOverButton 
              onClick={(e) => {
                e.preventDefault()
                e.stopPropagation()
                console.log('Restart button clicked!')
                logger.navigation('Restart button clicked')
                restartGame()
              }}
              onMouseDown={(e) => {
                e.preventDefault()
                e.stopPropagation()
                console.log('Restart button mouse down')
              }}
            >
              –†–ï–°–¢–ê–†–¢
            </GameOverButton>
            <GameOverButton 
              onClick={(e) => {
                e.preventDefault()
                e.stopPropagation()
                console.log('Exit button clicked!')
                logger.navigation('Exit button clicked')
                exitGame()
              }}
              onMouseDown={(e) => {
                e.preventDefault()
                e.stopPropagation()
                console.log('Exit button mouse down')
              }}
            >
              –î–û–ú–û–ô
            </GameOverButton>
          </GameOverButtons>
        </GameOverOverlay>
      )}
    </GameContainer>
  )
}

export default SpaceInvadersPage 