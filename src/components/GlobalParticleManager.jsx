import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react'
import { useLocation } from 'react-router-dom'
import UniversalParticles from './UniversalParticles'
import { gsap } from 'gsap'
import logger from '../utils/Logger'

const ParticleContext = createContext()

export const useParticles = () => {
  const context = useContext(ParticleContext)
  if (!context) {
    throw new Error('useParticles must be used within a ParticleProvider')
  }
  return context
}

export const ParticleProvider = ({ children }) => {
  const location = useLocation()
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  const getInitialPage = () => {
    return location.pathname === '/home' ? 'home' : 'start'
  }
  
  const [currentPage, setCurrentPage] = useState(getInitialPage())
  const [camera, setCamera] = useState(null)
  const [particlesVisible, setParticlesVisible] = useState(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —á–∞—Å—Ç–∏—Ü
  const [hoveredRect, setHoveredRect] = useState(null) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ hover
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getInitialParticleProps = () => {
  // Treat /home and /menu the same for initial particle scale (mobile/home parity)
  if (location.pathname === '/home' || location.pathname === '/menu') {
      return {
        color: "#D14836",
        size: 0.005,
        opacity: 0.7
      }
    }
    return {
      color: "#FF5544",
      size: 0.025,
      opacity: 0.9
    }
  }
  
  const [particleProps, setParticleProps] = useState(getInitialParticleProps())
  const [particleAnimation, setParticleAnimation] = useState({
    rotationSpeed: { x: 1, y: 1 },
    fastRotation: false
  })
  const [isPageVisible, setIsPageVisible] = useState(true)
  const [savedSpeed, setSavedSpeed] = useState({ x: 1, y: 1 })
  const [transitionContext, setTransitionContext] = useState(null)
  const [isAnimating, setIsAnimating] = useState(false) // –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const particleAnimationRef = useRef(particleAnimation) // Ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  const colorAnimationRef = useRef(null) // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
  const hasAnimatedLightLabEntry = useRef(false) // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ LightLab

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ particleAnimation
  useEffect(() => {
    particleAnimationRef.current = particleAnimation
  }, [particleAnimation])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    const path = location.pathname
    
    logger.navigation('Route change detected', { 
      from: currentPage, 
      to: path,
      hasCamera: !!camera 
    })
    
    // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–´–•–û–î–ê –ò–ó LIGHTLAB
    if (path === '/menu' && currentPage === 'lightlab-case' && !isAnimating) {
      console.log('üö® DIRECT lightlab->menu transition detected!')
      logger.particles('DIRECT lightlab->menu transition', { path, currentPage })
      setIsAnimating(true)
      setCurrentPage('projects')
      setParticlesVisible(true)
      setTimeout(() => {
        console.log('üîÑ Executing lightlab exit animation')
        animateParticlesLightLabExit()
        setTimeout(() => {
          setIsAnimating(false)
          console.log('üîì Animation finished, isAnimating set to false')
        }, 2000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      }, 100)
      return // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    }
    
    if (path === '/' && currentPage === 'home') {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –∞–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
      if (camera) {
        animateToStart()
      }
    } else if (path === '/' && currentPage !== 'start') {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
      setCurrentPage('start')
      setParticlesVisible(false) // –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    } else if (path === '/home' && currentPage === 'start') {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π - –∞–Ω–∏–º–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
      if (camera) {
        animateToHome()
      }
    } else if (path === '/home' && (currentPage === 'projects' || currentPage === 'menu') && !isAnimating) {
      // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
      logger.particles('Contextual transition: projects->home', { context: transitionContext })
      setCurrentPage('home')
      setParticlesVisible(true)
      animateParticlesHomeReturn()
      return
    } else if (path === '/home' && currentPage !== 'home' && !isAnimating) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥)
      setCurrentPage('home')
      setParticlesVisible(true) // –ù–∞ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–∞—Å—Ç–∏—Ü—ã –≤–∏–¥–Ω—ã —Å—Ä–∞–∑—É
    } else if (path === '/menu' && currentPage === 'home' && !isAnimating) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–µ–Ω—é —Å –¥–æ–º–∞—à–Ω–µ–π ‚Äî –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
      logger.particles('Transition: home->menu (no rotation animation)', { context: transitionContext, particlesVisible })
      setCurrentPage('menu')
      setParticlesVisible(true)
      console.log('üé® Setting particles visible for home->menu transition')
      // –§–∏–∫—Å–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –±–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏—è/–∑–∞–º–µ–¥–ª–µ–Ω–∏—è
      setParticleAnimation({ rotationSpeed: { x: 1.0, y: 1.0 }, fastRotation: false })
      // –¶–≤–µ—Ç —á–∞—Å—Ç–∏—Ü –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
      return
    } else if (path === '/menu' && currentPage !== 'menu' && !isAnimating) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω—é –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥)
      logger.particles('Direct transition to menu', { from: currentPage, to: 'menu', particlesVisible })
      setCurrentPage('menu')
      setParticlesVisible(true)
      console.log('üé® Setting particles visible for menu page')
      return
    } else if (path === '/game' && currentPage === 'home' && !isAnimating) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∏–≥—Ä—É —Å –¥–æ–º–∞—à–Ω–µ–π - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
      logger.particles('Contextual transition: home->game', { context: transitionContext })
      setCurrentPage('game')
      setParticlesVisible(true)
      animateParticlesGameEntry()
      return
    } else if (path === '/game' && currentPage !== 'game' && !isAnimating) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥)
      setCurrentPage('game')
      setParticlesVisible(true)
      return
    } else if (path === '/home' && currentPage === 'game' && !isAnimating) {
      // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã –Ω–∞ –¥–æ–º–∞—à–Ω—é—é - –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      logger.particles('Contextual transition: game->home', { context: transitionContext })
      console.log('üéÆ‚û°Ô∏èüè† Detected game exit, starting particles restoration animation')
      setCurrentPage('home')
      setParticlesVisible(true)
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
      setTimeout(() => {
        animateParticlesGameExit()
      }, 100)
      return
  } else if ((path === '/project/lightlab' || path === '/project/voytenko') && !isAnimating) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–µ–π—Å–∞ LightLab - –±–µ–ª—ã–π —Ñ–æ–Ω —Å —á–µ—Ä–Ω—ã–º–∏ —á–∞—Å—Ç–∏—Ü–∞–º–∏
      logger.particles('Contextual transition: projects->lightlab-case', { context: transitionContext })
  console.log('üì∏ Detected case page entry, switching to white background with black particles')
  setCurrentPage('lightlab-case')
      setParticlesVisible(true)
      animateParticlesLightLabEntry()
      return
    } else if (path === '/menu' && currentPage !== 'menu' && currentPage !== 'lightlab-case' && !isAnimating) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ menu —Å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      logger.particles('Generic transition to menu', { from: currentPage, to: 'menu' })
      setCurrentPage('menu')
      setParticlesVisible(true)
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–µ —Å lightlab, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
      if (currentPage !== 'lightlab-case') {
        setParticleProps(prev => ({
          ...prev,
          color: '#D14836',
          size: 0.005,
          opacity: 0.7
        }))
        setParticleAnimation(prev => ({
          ...prev,
          rotationSpeed: { x: 1.0, y: 1.0 },
          fastRotation: false
        }))
      }
    }
  }, [location.pathname, camera, currentPage, transitionContext])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        const currentSpeed = particleAnimation.rotationSpeed
        logger.particles('Page hidden - pausing animations', { 
          currentSpeed, 
          currentPage 
        })
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω—É–ª–µ–≤–∞—è
        if (currentSpeed.x !== 0 || currentSpeed.y !== 0) {
          setSavedSpeed(currentSpeed)
        }
        
        setParticleAnimation(prev => ({
          ...prev,
          rotationSpeed: { x: 0, y: 0 }
        }))
        setIsPageVisible(false)
      } else {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —á–∞—Å—Ç–∏—Ü
        logger.particles('Page visible - restoring animations', { 
          savedSpeed, 
          currentPage 
        })
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let speedToRestore = savedSpeed
        
        // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω—É–ª–µ–≤–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (savedSpeed.x === 0 && savedSpeed.y === 0) {
          speedToRestore = currentPage === 'lightlab-case' 
            ? { x: 0.4, y: 0.4 }
            : { x: 1.0, y: 1.0 }
          
          logger.particles('Using default speed for page', { speedToRestore, currentPage })
          setSavedSpeed(speedToRestore) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        }
        
        setParticleAnimation(prev => ({
          ...prev,
          rotationSpeed: speedToRestore
        }))
        setIsPageVisible(true)
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è
    document.addEventListener('visibilitychange', handleVisibilityChange)

    // –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º focus/blur –æ–∫–Ω–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const handleFocus = () => {
      if (!document.hidden && !isAnimating) {
        logger.particles('Window focused - restoring animations', { 
          savedSpeed, 
          currentPage,
          particleAnimationSpeed: particleAnimation.rotationSpeed,
          isAnimating
        })
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let speedToRestore = savedSpeed
        
        // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω—É–ª–µ–≤–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (savedSpeed.x === 0 && savedSpeed.y === 0) {
          speedToRestore = currentPage === 'lightlab-case' 
            ? { x: 0.4, y: 0.4 }
            : { x: 1.0, y: 1.0 }
          
          logger.particles('Using default speed for page', { speedToRestore, currentPage })
          setSavedSpeed(speedToRestore) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        }
        
        setParticleAnimation(prev => ({
          ...prev,
          rotationSpeed: speedToRestore
        }))
        setIsPageVisible(true)
      } else if (isAnimating) {
        logger.particles('Window focused but animation in progress - skipping restoration', { isAnimating })
      }
    }

    const handleBlur = () => {
      if (!isAnimating) {
        const currentSpeed = particleAnimationRef.current.rotationSpeed
        logger.particles('Window blurred - pausing animations', { 
          currentSpeed, 
          currentPage,
          isAnimating
        })
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω—É–ª–µ–≤–∞—è
        if (currentSpeed.x !== 0 || currentSpeed.y !== 0) {
          setSavedSpeed(currentSpeed)
        }
        
        setParticleAnimation(prev => ({
          ...prev,
          rotationSpeed: { x: 0, y: 0 }
        }))
        setIsPageVisible(false)
      } else {
        logger.particles('Window blurred but animation in progress - skipping pause', { isAnimating })
      }
    }

    window.addEventListener('focus', handleFocus)
    window.addEventListener('blur', handleBlur)

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
      window.removeEventListener('focus', handleFocus)
      window.removeEventListener('blur', handleBlur)
    }
  }, [savedSpeed, currentPage, isAnimating])

  const animateToHome = () => {
    if (camera) {
      // –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –∏ —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const startPos = { 
        z: camera.position.z, 
        fov: camera.fov,
        size: particleProps.size,
        opacity: particleProps.opacity
      }
      const endPos = { 
        z: 1, 
        fov: 75,
        size: 0.005,
        opacity: 0.7
      }

      // GSAP –∞–Ω–∏–º–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –∏ —á–∞—Å—Ç–∏—Ü
      gsap.to(startPos, {
        z: endPos.z,
        fov: endPos.fov,
        size: endPos.size,
        opacity: endPos.opacity,
        duration: 1.5,
        ease: "power2.inOut",
        onUpdate: () => {
          camera.position.z = startPos.z
          camera.fov = startPos.fov
          camera.updateProjectionMatrix()
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü
          setParticleProps({
            color: "#D14836", // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            size: startPos.size,
            opacity: startPos.opacity
          })
        },
        onComplete: () => {
          setCurrentPage('home')
          setParticlesVisible(true) // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —á–∞—Å—Ç–∏—Ü—ã –≤–∏–¥–Ω—ã
        }
      })
    }
  }

  const animateToStart = () => {
    if (camera) {
      const startPos = { 
        z: camera.position.z, 
        fov: camera.fov,
        size: particleProps.size,
        opacity: particleProps.opacity
      }
      const endPos = { 
        z: 0.2, 
        fov: 90,
        size: 0.025,
        opacity: 0.9
      }

      gsap.to(startPos, {
        z: endPos.z,
        fov: endPos.fov,
        size: endPos.size,
        opacity: endPos.opacity,
        duration: 1.5,
        ease: "power2.inOut",
        onUpdate: () => {
          camera.position.z = startPos.z
          camera.fov = startPos.fov
          camera.updateProjectionMatrix()
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü
          setParticleProps({
            color: "#FF5544", // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
            size: startPos.size,
            opacity: startPos.opacity
          })
        },
        onComplete: () => {
          setCurrentPage('start')
          setParticlesVisible(true) // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —á–∞—Å—Ç–∏—Ü—ã –≤–∏–¥–Ω—ã
        }
      })
    }
  }

  const handleCameraReady = ({ camera: cameraObj }) => {
    setCamera(cameraObj)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (currentPage === 'start') {
      startParticleAppearAnimation()
    } else {
      // –ù–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —á–∞—Å—Ç–∏—Ü—ã –≤–∏–¥–Ω—ã —Å—Ä–∞–∑—É
      setParticlesVisible(true)
    }
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const startParticleAppearAnimation = () => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      setParticlesVisible(true)
    }, 200) // 200–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
  const animateParticlesMenuEntry = () => {
    if (!camera) return
    
    logger.particles('Starting menu entry animation', { 
      direction: 'left',
      effect: 'gradual acceleration then deceleration',
      initialSpeed: { x: 1.0, y: 1.0 },
      peakSpeed: { x: 1.8, y: 1.3 },
      finalSpeed: { x: 1.0, y: 1.0 }
    })
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    setParticleAnimation({
      rotationSpeed: { x: 1.0, y: 1.0 },
      fastRotation: false
    })
    
    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞: –∫—Ä–∞—Å–Ω—ã–π ‚Üí —Å–∏–Ω–∏–π
    animateParticleColor('#D14836', '#2196F3', 1500)
    
    // –§–∞–∑–∞ 1: –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (600–º—Å)
    const accelerationInterval = setInterval(() => {
      setParticleAnimation(prev => {
        const newSpeedX = Math.min(prev.rotationSpeed.x * 1.08, 1.8) // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ –ø–∏–∫–∞
        const newSpeedY = Math.min(prev.rotationSpeed.y * 1.06, 1.3)
        
        if (newSpeedX >= 1.75 && newSpeedY >= 1.25) {
          clearInterval(accelerationInterval)
          logger.particles('Acceleration phase completed, starting deceleration')
          
          // –§–∞–∑–∞ 2: –ü–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–æ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 400–º—Å)
          setTimeout(() => {
            const decelerationInterval = setInterval(() => {
              setParticleAnimation(prev => {
                const newSpeedX = Math.max(prev.rotationSpeed.x * 0.96, 1.0)
                const newSpeedY = Math.max(prev.rotationSpeed.y * 0.97, 1.0)
                
                if (newSpeedX <= 1.05 && newSpeedY <= 1.05) {
                  clearInterval(decelerationInterval)
                  logger.particles('Menu entry animation completed')
                  return {
                    rotationSpeed: { x: 1.0, y: 1.0 }, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                    fastRotation: false
                  }
                }
                
                return {
                  rotationSpeed: { x: newSpeedX, y: newSpeedY },
                  fastRotation: newSpeedX > 1.2
                }
              })
            }, 150) // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
          }, 400) // –ü–∞—É–∑–∞ –Ω–∞ –ø–∏–∫–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
          
          return {
            rotationSpeed: { x: newSpeedX, y: newSpeedY },
            fastRotation: true
          }
        }
        
        return {
          rotationSpeed: { x: newSpeedX, y: newSpeedY },
          fastRotation: newSpeedX > 1.2
        }
      })
    }, 120) // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —É—Å–∫–æ—Ä–µ–Ω–∏—è
  }

  const animateParticlesHomeReturn = () => {
    if (!camera) return
    
    logger.particles('Starting home return animation', { 
      direction: 'right',
      effect: 'gradual acceleration then deceleration',
      initialSpeed: { x: 1.0, y: 1.0 },
      peakSpeed: { x: -1.7, y: 1.2 },
      finalSpeed: { x: 1.0, y: 1.0 }
    })
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    setParticleAnimation({
      rotationSpeed: { x: 1.0, y: 1.0 },
      fastRotation: false
    })
    
    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞: —Ç–µ–∫—É—â–∏–π ‚Üí –∫—Ä–∞—Å–Ω—ã–π
    animateParticleColor(particleProps.color || '#2196F3', '#D14836', 1600)
    
    // –§–∞–∑–∞ 1: –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    const accelerationInterval = setInterval(() => {
      setParticleAnimation(prev => {
        const newSpeedX = prev.rotationSpeed.x > 0 
          ? Math.max(prev.rotationSpeed.x * 0.92, -1.7) // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
          : Math.max(prev.rotationSpeed.x * 1.08, -1.7) // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
        const newSpeedY = Math.min(prev.rotationSpeed.y * 1.05, 1.2)
        
        if (newSpeedX <= -1.65 && newSpeedY >= 1.15) {
          clearInterval(accelerationInterval)
          logger.particles('Home return acceleration completed, starting deceleration')
          
          // –§–∞–∑–∞ 2: –ü–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–æ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
          setTimeout(() => {
            const decelerationInterval = setInterval(() => {
              setParticleAnimation(prev => {
                const newSpeedX = prev.rotationSpeed.x < 0 
                  ? Math.min(prev.rotationSpeed.x * 0.94, 1.0) // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                  : Math.max(prev.rotationSpeed.x * 0.96, 1.0)
                const newSpeedY = Math.max(prev.rotationSpeed.y * 0.97, 1.0)
                
                if (Math.abs(newSpeedX - 1.0) <= 0.05 && newSpeedY <= 1.05) {
                  clearInterval(decelerationInterval)
                  logger.particles('Home return animation completed')
                  return {
                    rotationSpeed: { x: 1.0, y: 1.0 }, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                    fastRotation: false
                  }
                }
                
                return {
                  rotationSpeed: { x: newSpeedX, y: newSpeedY },
                  fastRotation: Math.abs(newSpeedX) > 1.2 || newSpeedY > 1.2
                }
              })
            }, 160) // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
          }, 500) // –ü–∞—É–∑–∞ –Ω–∞ –ø–∏–∫–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
          
          return {
            rotationSpeed: { x: newSpeedX, y: newSpeedY },
            fastRotation: true
          }
        }
        
        return {
          rotationSpeed: { x: newSpeedX, y: newSpeedY },
          fastRotation: Math.abs(newSpeedX) > 1.2 || newSpeedY > 1.2
        }
      })
    }, 130) // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —É—Å–∫–æ—Ä–µ–Ω–∏—è
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
  const animateParticlesGameEntry = () => {
    if (!camera) return
    
    logger.particles('Starting game entry animation', { 
      direction: 'backwards',
      effect: 'backward movement for gaming immersion',
      initialSpeed: { x: 1.0, y: 1.0 },
      peakSpeed: { x: 0.3, y: 1.8 }, // –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–æ X, –±—ã—Å—Ç—Ä–æ –ø–æ Y –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
      finalSpeed: { x: 0.2, y: 1.4 } // –ò–≥—Ä–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
    })
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    setParticleAnimation({
      rotationSpeed: { x: 1.0, y: 1.0 },
      fastRotation: false
    })
    
    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞: –∫—Ä–∞—Å–Ω—ã–π ‚Üí —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π (–∏–≥—Ä–æ–≤–æ–π)
    animateParticleColor('#D14836', '#8A2BE2', 1200)
    
    // –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
    const accelerationInterval = setInterval(() => {
      setParticleAnimation(prev => {
        const newSpeedX = Math.max(prev.rotationSpeed.x * 0.94, 0.3) // –ó–∞–º–µ–¥–ª—è–µ–º X –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
        const newSpeedY = Math.min(prev.rotationSpeed.y * 1.08, 1.8) // –£—Å–∫–æ—Ä—è–µ–º Y
        
        if (newSpeedX <= 0.35 && newSpeedY >= 1.7) {
          clearInterval(accelerationInterval)
          logger.particles('Game backward animation completed, maintaining gaming speed')
          
          // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
          setTimeout(() => {
            setParticleAnimation({
              rotationSpeed: { x: 0.2, y: 1.4 }, // –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–æ X, –±—ã—Å—Ç—Ä–æ –ø–æ Y
              fastRotation: true
            })
          }, 300)
          
          return {
            rotationSpeed: { x: newSpeedX, y: newSpeedY },
            fastRotation: true
          }
        }
        
        return {
          rotationSpeed: { x: newSpeedX, y: newSpeedY },
          fastRotation: newSpeedY > 1.3
        }
      })
    }, 120)
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
  const animateParticlesGameExit = () => {
    if (!camera) return
    
    setIsAnimating(true) // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ focus/blur –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    logger.particles('Starting game exit animation', { 
      direction: 'forward',
      effect: 'return from backward movement to normal',
      initialSpeed: { x: 0.2, y: 1.4 }, // –ò–≥—Ä–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º –Ω–∞–∑–∞–¥
      finalSpeed: { x: 1.0, y: 1.0 } // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    })
    
    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞: —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π ‚Üí –∫—Ä–∞—Å–Ω—ã–π (–æ–±—Ä–∞—Ç–Ω–æ)
    animateParticleColor('#8A2BE2', '#D14836', 1200)
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Å—Ç–∏—Ü –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setParticleProps(prev => ({
      ...prev,
      size: 0.005,    // –†–∞–∑–º–µ—Ä –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      opacity: 0.7    // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }))
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    setSavedSpeed({ x: 1.0, y: 1.0 })
    
    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
    const decelerationInterval = setInterval(() => {
      setParticleAnimation(prev => {
        const newSpeedX = Math.min(prev.rotationSpeed.x * 1.12, 1.0) // –£—Å–∫–æ—Ä—è–µ–º X –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–æ—Ä–º–µ
        const newSpeedY = Math.max(prev.rotationSpeed.y * 0.93, 1.0) // –ó–∞–º–µ–¥–ª—è–µ–º Y –∫ –Ω–æ—Ä–º–µ
        
        if (newSpeedX >= 0.95 && newSpeedY <= 1.05) {
          clearInterval(decelerationInterval)
          logger.particles('Game exit animation completed - fully restored to home state', {
            finalSpeed: { x: 1.0, y: 1.0 },
            color: '#D14836',
            size: 0.005,
            opacity: 0.7
          })
          
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ focus/blur
          setIsAnimating(false)
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(() => {
            setTransitionContext(null)
          }, 200)
          
          return {
            rotationSpeed: { x: 1.0, y: 1.0 }, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            fastRotation: false
          }
        }
        
        return {
          rotationSpeed: { x: newSpeedX, y: newSpeedY },
          fastRotation: newSpeedY > 1.2
        }
      })
    }, 100) // –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∫–µ–π—Å LightLab
  const animateParticlesLightLabEntry = () => {
    if (!camera) return
    if (hasAnimatedLightLabEntry.current) {
      logger.particles('LightLab entry animation already performed, skipping')
      return
    }
    hasAnimatedLightLabEntry.current = true
    
    logger.particles('Starting LightLab case entry animation', { 
      effect: 'switch to black particles on white background',
      finalColor: '#000000',
      finalSpeed: { x: 0.4, y: 0.4 }
    })
    
    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞: –∫—Ä–∞—Å–Ω—ã–π ‚Üí —á–µ—Ä–Ω—ã–π
    animateParticleColor('#D14836', '#000000', 1500)
    
    // –ó–∞–º–µ–¥–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è –±–æ–ª–µ–µ —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    setParticleAnimation(prev => ({
      ...prev,
      rotationSpeed: { x: 0.4, y: 0.4 },
      fastRotation: false
    }))
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
    setParticleProps(prev => ({
      ...prev,
      size: 0.006,    // –ü–æ–º–µ–Ω—å—à–µ –¥–ª—è –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
      opacity: 0.4    // –ë–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –¥–ª—è —Ç–æ–Ω–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    }))
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫–µ–π—Å–∞
    setSavedSpeed({ x: 0.4, y: 0.4 })
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
    setTimeout(() => {
      setTransitionContext(null)
    }, 1500)
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–µ–π—Å–∞ LightLab
  const animateParticlesLightLabExit = () => {
    if (!camera) return
    hasAnimatedLightLabEntry.current = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    
    logger.particles('Starting LightLab case exit animation', { 
      effect: 'return to red particles',
      finalColor: '#D14836',
      finalSpeed: { x: 1.0, y: 1.0 }
    })
    
    // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞: —á–µ—Ä–Ω—ã–π ‚Üí –∫—Ä–∞—Å–Ω—ã–π
    animateParticleColor('#000000', '#D14836', 1000)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    setParticleAnimation(prev => ({
      ...prev,
      rotationSpeed: { x: 1.0, y: 1.0 },
      fastRotation: false
    }))
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setParticleProps(prev => ({
      ...prev,
      size: 0.005,    // –û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      opacity: 0.7    // –û–±—ã—á–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    }))
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    setSavedSpeed({ x: 1.0, y: 1.0 })
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
    setTimeout(() => {
      setTransitionContext(null)
    }, 1200)
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —á–∞—Å—Ç–∏—Ü
  const animateParticleColor = (fromColor, toColor, duration) => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if (colorAnimationRef.current) {
      cancelAnimationFrame(colorAnimationRef.current)
      logger.particles('Previous color animation cancelled')
    }
    
    logger.particles('Color transition started', { from: fromColor, to: toColor, duration })
    
    const startTime = Date.now()
    const animate = () => {
      const elapsed = Date.now() - startTime
      const progress = Math.min(elapsed / duration, 1)
      
      // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ü–≤–µ—Ç–∞
      const interpolatedColor = interpolateColor(fromColor, toColor, progress)
      
      setParticleProps(prev => ({
        ...prev,
        color: interpolatedColor
      }))
      
      if (progress < 1) {
        colorAnimationRef.current = requestAnimationFrame(animate)
      } else {
        colorAnimationRef.current = null
        logger.particles('Color transition completed', { finalColor: toColor })
      }
    }
    
    colorAnimationRef.current = requestAnimationFrame(animate)
  }

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–≤–µ—Ç–∞
  const interpolateColor = (color1, color2, factor) => {
    const hex1 = color1.replace('#', '')
    const hex2 = color2.replace('#', '')
    
    const r1 = parseInt(hex1.substr(0, 2), 16)
    const g1 = parseInt(hex1.substr(2, 2), 16)
    const b1 = parseInt(hex1.substr(4, 2), 16)
    
    const r2 = parseInt(hex2.substr(0, 2), 16)
    const g2 = parseInt(hex2.substr(2, 2), 16)
    const b2 = parseInt(hex2.substr(4, 2), 16)
    
    const r = Math.round(r1 + (r2 - r1) * factor)
    const g = Math.round(g1 + (g2 - g1) * factor)
    const b = Math.round(b1 + (b2 - b1) * factor)
    
    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`
  }

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const animateToMenu = () => {
    logger.particles('Legacy animateToMenu called - redirecting to contextual animation')
    animateParticlesMenuEntry()
  }

  const animateFromMenu = () => {
    logger.particles('Legacy animateFromMenu called - redirecting to contextual animation')
    animateParticlesHomeReturn()
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é —á–∞—Å—Ç–∏—Ü
  const setParticleSpeed = useCallback((speed) => {
    const newSpeed = { x: speed, y: speed }
    setSavedSpeed(newSpeed) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    
    logger.particles('setParticleSpeed called', { speed, isPageVisible, documentHidden: document.hidden })
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞
    if (isPageVisible && !document.hidden) {
      setParticleAnimation(prev => ({
        ...prev,
        rotationSpeed: newSpeed
      }))
    }
  }, [isPageVisible])

  const value = {
    currentPage,
    setCurrentPage,
    animateToHome,
    animateToStart,
    animateToMenu,
    animateFromMenu,
    setParticleSpeed,
    camera,
    particlesVisible,
    startParticleAppearAnimation,
    isPageVisible,
    setTransitionContext,
    transitionContext,
    animateParticlesGameExit,
    animateParticlesLightLabEntry,
    animateParticlesLightLabExit,
    hoveredRect,
    setHoveredRect,
    setParticleProps, // Added to expose the setter
    pauseParticles: () => {
      // Save current speed (if not zero) and set speed to 0
      setSavedSpeed(prev => {
        const cur = particleAnimationRef.current.rotationSpeed
        if ((cur.x !== 0 || cur.y !== 0)) return cur
        return prev
      })
      setParticleAnimation(prev => ({ ...prev, rotationSpeed: { x: 0, y: 0 } }))
    },
    resumeParticles: () => {
      // Restore saved speed or fallback to default for current page
      setParticleAnimation(prev => {
        let restore = savedSpeed
        if (restore.x === 0 && restore.y === 0) {
          restore = currentPage === 'lightlab-case' ? { x: 0.4, y: 0.4 } : { x: 1.0, y: 1.0 }
        }
        return { ...prev, rotationSpeed: restore }
      })
    }
  }

  return (
    <ParticleContext.Provider value={value}>
      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã - –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç */}
      <UniversalParticles 
        isStartPage={currentPage === 'start'} 
        onCameraReady={handleCameraReady}
        particleColor={particleProps.color}
        particleSize={particleProps.size}
        particleOpacity={particleProps.opacity}
        rotationSpeed={particleAnimation.rotationSpeed}
        fastRotation={particleAnimation.fastRotation}
        particlesVisible={particlesVisible}
        isLightLabCase={currentPage === 'lightlab-case'}
        hoveredRect={hoveredRect}
      />
      {children}
    </ParticleContext.Provider>
  )
}

export default ParticleProvider