import React, { useEffect, useRef } from 'react'
import { gsap } from 'gsap'

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ—Ä–∞–±–ª—è
window.startShipAnimation = null

const CustomCursor = ({ color = '#D14836' }) => {
  const cursorRef = useRef(null)
  const trailRef = useRef(null)
  const mousePos = useRef({ x: 0, y: 0 })
  const cursorPos = useRef({ x: 0, y: 0 })
  const velocity = useRef({ x: 0, y: 0 })
  const animationId = useRef(null)
  const cursorState = useRef({ scaleX: 1, scaleY: 1, rotation: 0 })

  useEffect(() => {
    const cursor = cursorRef.current
    const trail = trailRef.current
    if (!cursor || !trail) return

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const isMobile = window.innerWidth <= 768 || 'ontouchstart' in window
    if (isMobile) return

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–¥–∞
    trail.style.position = 'fixed'
    trail.style.pointerEvents = 'none'
    trail.style.zIndex = '9998'
    trail.style.mixBlendMode = 'difference'
    trail.style.opacity = '0'

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    const calculateVelocity = (current, previous) => {
      return {
        x: current.x - previous.x,
        y: current.y - previous.y
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    const updateCursor = () => {
      const prevCursorPos = { ...cursorPos.current }

      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º—ã—à—å—é –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
      cursorPos.current.x = mousePos.current.x
      cursorPos.current.y = mousePos.current.y
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
      velocity.current = calculateVelocity(cursorPos.current, prevCursorPos)
      
      const speed = Math.sqrt(velocity.current.x ** 2 + velocity.current.y ** 2)
      
      // –≠—Ñ—Ñ–µ–∫—Ç "–æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à–∞—Ä–∞" (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ)
      let targetScaleX = 1
      let targetScaleY = 1
      let targetRotation = cursorState.current.rotation

      if (speed > 1) {
        const angle = Math.atan2(velocity.current.y, velocity.current.x) * (180 / Math.PI)
        const stretchIntensity = Math.min(speed / 15, 0.6) // –£–≤–µ–ª–∏—á–∏–ª —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        targetScaleX = 1 + stretchIntensity
        targetScaleY = 1 - stretchIntensity // –£—Å–∏–ª–∏–ª —Å–∂–∞—Ç–∏–µ
        targetRotation = angle
      }

      // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –º—è–≥–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      const lerpFactor = 0.2 // –£–≤–µ–ª–∏—á–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
      cursorState.current.scaleX += (targetScaleX - cursorState.current.scaleX) * lerpFactor
      cursorState.current.scaleY += (targetScaleY - cursorState.current.scaleY) * lerpFactor

      let deltaRotation = targetRotation - cursorState.current.rotation
      if (deltaRotation > 180) deltaRotation -= 360
      if (deltaRotation < -180) deltaRotation += 360
      cursorState.current.rotation += deltaRotation * lerpFactor
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
      gsap.set(cursor, {
        x: cursorPos.current.x - 10,
        y: cursorPos.current.y - 10,
        rotation: cursorState.current.rotation,
        scaleX: cursorState.current.scaleX,
        scaleY: cursorState.current.scaleY,
      })
      
      // –≠—Ñ—Ñ–µ–∫—Ç —Å–ª–µ–¥–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
      if (speed > 5) {
        const trailIntensity = Math.min(speed / 20, 1)
        const trailLength = Math.min(speed * 0.8, 40)
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        const trailX = cursorPos.current.x - (velocity.current.x * trailLength / speed)
        const trailY = cursorPos.current.y - (velocity.current.y * trailLength / speed)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥
        gsap.set(trail, {
          x: trailX - 10,
          y: trailY - 10,
          scaleX: 1 + (trailIntensity * 0.5),
          scaleY: 1 - (trailIntensity * 0.2),
          opacity: trailIntensity * 0.6
        })
        
        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º —Å–ª–µ–¥
        gsap.to(trail, {
          opacity: 0,
          scaleX: 1,
          scaleY: 1,
          duration: 0.3,
          ease: "power2.out"
        })
      }
      
      animationId.current = requestAnimationFrame(updateCursor)
    }

    const moveCursor = (e) => {
      mousePos.current.x = e.clientX
      mousePos.current.y = e.clientY
    }

    const handleMouseEnter = () => {
      cursor.classList.add('hover')
      trail.classList.add('hover')
    }

    const handleMouseLeave = () => {
      cursor.classList.remove('hover')
      trail.classList.remove('hover')
    }

    const handleNavigationEdgeEnter = () => {
      cursor.classList.remove('hover', 'triangle')
      cursor.classList.add('navigation')
      cursor.textContent = '>'
      trail.style.display = 'none'
      document.body.style.cursor = 'none'
    }

    const handleNavigationEdgeLeave = () => {
      cursor.classList.remove('navigation')
      cursor.textContent = ''
      trail.style.display = 'block'
      document.body.style.cursor = 'none'
    }

    const handleNavigationEdgeLeftEnter = () => {
      cursor.classList.remove('hover', 'navigation')
      cursor.classList.add('triangle')
      cursor.textContent = ''
      cursor.style.backgroundColor = 'transparent'
      trail.style.display = 'none'
      document.body.style.cursor = 'none'
    }

    const handleNavigationEdgeLeftLeave = () => {
      cursor.classList.remove('triangle')
      cursor.textContent = ''
      cursor.style.backgroundColor = color
      trail.style.display = 'block'
      document.body.style.cursor = 'none'
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≤ –∫–æ—Ä–∞–±–ª—å
    const startShipAnimation = () => {
      console.log('üéÆ CustomCursor: startShipAnimation called')
      
      const cursorRect = cursor.getBoundingClientRect()
      const targetX = window.innerWidth / 2
      const targetY = window.innerHeight - 80
      
      const animationData = {
        startX: cursorRect.left + 8,
        startY: cursorRect.top + 10,
        targetX: targetX,
        targetY: targetY,
        active: true
      }
      
      console.log('üìä CustomCursor: Animation data prepared', {
        cursor: { x: cursorRect.left, y: cursorRect.top, width: cursorRect.width, height: cursorRect.height },
        animationData,
        viewport: { width: window.innerWidth, height: window.innerHeight },
        shipPosition: { x: targetX, y: targetY },
        distance: Math.sqrt((targetX - animationData.startX) ** 2 + (targetY - animationData.startY) ** 2)
      })
      
      sessionStorage.setItem('cursorToShipAnimation', JSON.stringify(animationData))
      console.log('üíæ CustomCursor: Animation data saved to sessionStorage')
      
      // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å–æ—Ä –∏ —Å–ª–µ–¥
      cursor.style.opacity = '0'
      trail.style.opacity = '0'
      console.log('üëª CustomCursor: Original cursor and trail hidden')
      
      return animationData
    }

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.startShipAnimation = startShipAnimation

    const updateInteractiveElements = () => {
      const interactiveElements = document.querySelectorAll('a, button, [data-hover]')
      interactiveElements.forEach(el => {
        el.addEventListener('mouseenter', handleMouseEnter)
        el.addEventListener('mouseleave', handleMouseLeave)
      })
      
      const navigationEdge = document.querySelector('.navigation-edge')
      if (navigationEdge) {
        navigationEdge.addEventListener('mouseenter', handleNavigationEdgeEnter)
        navigationEdge.addEventListener('mouseleave', handleNavigationEdgeLeave)
      }

      const gameEdge = document.querySelector('.game-edge')
      if (gameEdge) {
        gameEdge.addEventListener('mouseenter', handleNavigationEdgeLeftEnter)
        gameEdge.addEventListener('mouseleave', handleNavigationEdgeLeftLeave)
      }
      
      return { interactiveElements, navigationEdge, gameEdge }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    const initMousePos = { x: window.innerWidth / 2, y: window.innerHeight / 2 }
    mousePos.current = initMousePos
    cursorPos.current = initMousePos

    document.addEventListener('mousemove', moveCursor)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animationId.current = requestAnimationFrame(updateCursor)
    
    let { interactiveElements, navigationEdge, gameEdge } = updateInteractiveElements()
    
    const observer = new MutationObserver(() => {
      interactiveElements.forEach(el => {
        el.removeEventListener('mouseenter', handleMouseEnter)
        el.removeEventListener('mouseleave', handleMouseLeave)
      })
      if (navigationEdge) {
        navigationEdge.removeEventListener('mouseenter', handleNavigationEdgeEnter)
        navigationEdge.removeEventListener('mouseleave', handleNavigationEdgeLeave)
      }
      if (gameEdge) {
        gameEdge.removeEventListener('mouseenter', handleNavigationEdgeLeftEnter)
        gameEdge.removeEventListener('mouseleave', handleNavigationEdgeLeftLeave)
      }
      
      const updated = updateInteractiveElements()
      interactiveElements = updated.interactiveElements
      navigationEdge = updated.navigationEdge
      gameEdge = updated.gameEdge
    })
    
    observer.observe(document.body, { childList: true, subtree: true })

    return () => {
      document.removeEventListener('mousemove', moveCursor)
      if (animationId.current) {
        cancelAnimationFrame(animationId.current)
      }
      observer.disconnect()
      interactiveElements.forEach(el => {
        el.removeEventListener('mouseenter', handleMouseEnter)
        el.removeEventListener('mouseleave', handleMouseLeave)
      })
      if (navigationEdge) {
        navigationEdge.removeEventListener('mouseenter', handleNavigationEdgeEnter)
        navigationEdge.removeEventListener('mouseleave', handleNavigationEdgeLeave)
      }
      if (gameEdge) {
        gameEdge.removeEventListener('mouseenter', handleNavigationEdgeLeftEnter)
        gameEdge.removeEventListener('mouseleave', handleNavigationEdgeLeftLeave)
      }
    }
  }, [color])

  return (
    <>
      <div ref={cursorRef} className="cursor" style={{ backgroundColor: color }} />
      <div ref={trailRef} className="cursor cursor-trail" style={{ backgroundColor: color }} />
    </>
  )
}

export default CustomCursor